openapi: 3.0.3
info:
  title: TODO API
  version: 1.0.0
servers:
  - url: http://localhost:4000
paths:
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [login, password]
              properties:
                login: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: integer }
                      login: { type: string }
                      firstName: { type: string }
                      lastName: { type: string }
                      managerId: { type: integer, nullable: true }
        '404': { description: USER_NOT_FOUND }
        '401': { description: WRONG_PASSWORD }
  /users/me:
    get:
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
  /users/subordinates:
    get:
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
  /tasks:
    get:
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
    post:
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, dueDate, priority, assigneeId]
              properties:
                title: { type: string }
                description: { type: string }
                dueDate: { type: string, format: date }
                priority:
                  type: string
                  enum: [HIGH, MEDIUM, LOW]
                assigneeId: { type: integer }
      responses:
        '201': { description: Created }
        '403': { description: ASSIGNEE_NOT_SUBORDINATE }
  /tasks/{id}/status:
    patch:
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [TODO, IN_PROGRESS, DONE, CANCELED]
      responses:
        '200': { description: OK }
        '403': { description: FORBIDDEN }
        '404': { description: TASK_NOT_FOUND }
  /tasks/{id}:
    patch:
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                dueDate: { type: string, format: date }
                priority:
                  type: string
                  enum: [HIGH, MEDIUM, LOW]
                assigneeId: { type: integer }
      responses:
        '200': { description: OK }
        '403': { description: BOSS_TASK | FORBIDDEN | ASSIGNEE_NOT_SUBORDINATE }
        '404': { description: TASK_NOT_FOUND }
    delete:
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204': { description: No Content }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
